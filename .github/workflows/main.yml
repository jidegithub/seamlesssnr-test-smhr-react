name: Compose

on: 
  push:
    branches: [ main ]

jobs:
    jest:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: install modules
          run: npm ci
        - name: run tests
          run: npm test

    build:

      name: build
      runs-on: ubuntu-latest
      strategy:
        matrix:
          node-version: [14.x, 16.x]

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Set Up Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v2
          with:
            node-version: ${{ matrix.node-version }}

        - name: Install Dependencies
          run: npm install
        
        - name: Run Unit Tests
          run: npm test

        - name: Build Application
          run: npm run build

    staging:

      name: staging
      runs-on: ubuntu-latest
      needs: [build]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2
        
        - name: Install Dependencies
          run: npm install

        - name: Build Application
          run: npm run build

        - name: Deploy to Netlify
          uses: nwtgck/actions-netlify@v2.0
          with:
            publish-dir: './dist'
            production-branch: main
            github-token: ${{ secrets.GITHUB_TOKEN }}
            deploy-message: "Deploy from GitHub Actions"
            enable-pull-request-comment: false
            enable-commit-comment: true
            overwrites-pull-request-comment: true
          env:
            NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
            NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    production:

      name: production
      runs-on: ubuntu-latest
      environment: 'prod'
      needs: [build, staging]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Deploy to Production
          run: |
            echo "production stage"
    
    rollback_on_failure:
      needs: production
      runs-on: ubuntu-latest
      if: ${{ needs.production.result == 'failure' }}

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Get Latest Successful Tag
          id: get_latest_tag
          run: echo "::set-output name=tag::$(git describe --abbrev=0 --tags)"
          # run: echo "{name}={value}" >> $GITHUB_OUTPUT

        - name: Rollback to Previous Version
          run: |
            git reset --hard ${{ steps.get_latest_tag.outputs.tag }}
            # Additional steps to redeploy the rolled-back version
    
    
    
    
    # tag:

        #   name: tag
        #   runs-on: ubuntu-latest
        #   needs: [build]

        #   steps: 
        #     - name: Set Dist Version
        #       run: |
        #         BUILD_NUMBER="${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}"
        #         echo "${BUILD_NUMBER}"
        #         VERSION="$(mvn -q -U -Dexpression=project.build.finalName help:evaluate -DforceStdout=true -DbuildNumber=${BUILD_NUMBER})"
        #         echo "DIST_VERSION=${VERSION}" >> $GITHUB_ENV
        #     - name: Create Tag
        #       uses: actions/github-script@v6
        #       with:
        #         script: |
        #           const {DIST_VERSION} = process.env          
        #           github.rest.git.createRef({
        #               owner: context.repo.owner,
        #               repo: context.repo.repo,
        #               ref: `refs/tags/${DIST_VERSION}`,
        #               sha: context.sha
        #           })