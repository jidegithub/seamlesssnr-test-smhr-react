name: Compose

on: 
  push:
    branches: [ main ]
  # workflow_run:
  #   workflows: [production]
  #   types: [completed]

jobs:
    jest:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: install modules
          run: npm ci
        - name: run tests
          run: npm test

    build:

      name: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Set Up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: 16

        - name: Install Dependencies
          run: npm install
        
        - name: Run Unit Tests
          run: npm test

        - name: Build Application
          run: npm run build

    staging:

      name: staging
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Deploy to Staging
          run: |
            # Add your deployment script/commands here
            echo "deploy stage"

    production:

      name: production
      runs-on: ubuntu-latest
      environment: 'prod'
      needs: [build, staging]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Deploy to Production
          run: |
            # Add your deployment script/commands here
            echo "production stage"
    
    tag:

      name: tag
      runs-on: ubuntu-latest
      needs: [build]

      steps: 
        - name: Set Dist Version
          run: |
            BUILD_NUMBER="${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}"
            echo "${BUILD_NUMBER}"
            VERSION="$(mvn -q -U -Dexpression=project.build.finalName help:evaluate -DforceStdout=true -DbuildNumber=${BUILD_NUMBER})"
            echo "DIST_VERSION=${VERSION}" >> $GITHUB_ENV
        - name: Create Tag
          uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const {DIST_VERSION} = process.env          
              github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${DIST_VERSION}`,
                  sha: context.sha
              })
          
    rollback_on_failure:
      needs: production
      runs-on: ubuntu-latest
      if: ${{ needs.production.result == 'success' }}

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Get Latest Successful Tag
          id: get_latest_tag
          run: echo "::set-output name=tag::$(git describe --abbrev=0 --tags)"

        - name: Rollback to Previous Version
          run: |
            git reset --hard ${{ steps.get_latest_tag.outputs.tag }}
            # Additional steps to redeploy the rolled-back version
