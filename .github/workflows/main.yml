name: Compose

on: 
  push:
    branches: [ main ]
  # workflow_run:
  #   workflows: [production]
  #   types: [completed]

jobs:
    jest:
      if: github.event_name == 'pull_request'
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: install modules
          run: npm ci
        - name: run tests
          run: npm test

    build:

      name: build
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Set Up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: 16

        - name: Install Dependencies
          run: npm install
        
        - name: Run Unit Tests
          run: npm test

        - name: Build Application
          run: npm run build

    staging:

      name: staging
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Deploy to Staging
          run: |
            # Add your deployment script/commands here
            echo "deploy stage"

    production:

      name: production
      runs-on: ubuntu-latest
      environment: 'prod'
      needs: [build, staging]
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Deploy to Production
          run: |
            # Add your deployment script/commands here
            echo "production stage"
          
    rollback_on_failure:
      needs: production
      runs-on: ubuntu-latest
      if: ${{ needs.production.result == 'success' }}

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2

        - name: Get Latest Successful Tag
          id: get_latest_tag
          run: echo "::set-output name=tag::$(git describe --abbrev=0 --tags)"

        - name: Rollback to Previous Version
          run: |
            git reset --hard ${{ steps.get_latest_tag.outputs.tag }}
            # Additional steps to redeploy the rolled-back version
    # on-success:
    #   runs-on: ubuntu-latest
    #   if: ${{ github.event.workflow_run.conclusion == 'success' }}
    #   steps:
    #     - run: echo 'The triggering workflow passed'
    # on-failure:
    #     runs-on: ubuntu-latest
    #     if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    #     steps:
    #       - run: echo 'The triggering workflow failed'

    #   name: undo
    #   # if: github.event_name == 'pull_request'
    #   if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    #     steps:
    #       - run: echo 'The triggering workflow failed'
    #   runs-on: ubuntu-latest
    #   steps: 
    #     - name: Checkout
    #       uses: actions/checkout@v2
    #       with:
    #         ref: ${{ github.event.inputs.branch }}
    #         fetch-depth: 0 
    #     - name: Undo Push
    #       uses: exions/undo-push@v1
    #       with:
    #         branch: ${{ github.event.inputs.branch }}


    # manual_approval:
    #   on-success:
    #     runs-on: ubuntu-latest
    #     if: ${{ github.event.workflow_run.conclusion == 'success' }}

    #     steps:
    #       - name: Request Manual Approval
    #         uses: actions/github-script@v5
    #         with:
    #           script: |
    #             const { data } = await github.pulls.list({
    #               owner: context.repo.owner,
    #               repo: context.repo.repo,
    #               state: 'open'
    #             });

    #             if (data.length === 0) {
    #               console.log('No open pull requests.');
    #               return;
    #             }

    #             const pullRequestNumber = data[0].number;
    #             await github.pulls.createReview({
    #               owner: context.repo.owner,
    #               repo: context.repo.repo,
    #               pull_number: pullRequestNumber,
    #               event: 'APPROVE'
    #             });
    #   on-failure:
    #     runs-on: ubuntu-latest
    #     if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    #     steps:
    #       - run: echo 'The triggering workflow failed'
